/**
 * Slamby API
 * Slamby API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class PrcServiceApi {
    protected basePath = 'https://localhost/';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * 
     * @param id 
     * @param prcActivateSettings 
     */
    public prcActivateService(id: string, prcActivateSettings?: models.IPrcActivateSettings, extraHttpRequestParams?: any): Observable<models.IProcess> {
        return this.prcActivateServiceWithHttpInfo(id, prcActivateSettings, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     */
    public prcDeactivateService(id: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.prcDeactivateServiceWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param settings 
     */
    public prcExportDictionaries(id: string, settings?: models.IExportDictionariesSettings, extraHttpRequestParams?: any): Observable<models.IProcess> {
        return this.prcExportDictionariesWithHttpInfo(id, settings, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     */
    public prcGetService(id: string, extraHttpRequestParams?: any): Observable<models.IPrcService> {
        return this.prcGetServiceWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     */
    public prcIndexPartialService(id: string, extraHttpRequestParams?: any): Observable<models.IProcess> {
        return this.prcIndexPartialServiceWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param prcIndexSettings 
     */
    public prcIndexService(id: string, prcIndexSettings?: models.IPrcIndexSettings, extraHttpRequestParams?: any): Observable<models.IProcess> {
        return this.prcIndexServiceWithHttpInfo(id, prcIndexSettings, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param request 
     * @param isStrict 
     */
    public prcKeywordsService(id: string, request?: models.IPrcKeywordsRequest, isStrict?: boolean, extraHttpRequestParams?: any): Observable<Array<models.IPrcKeywordsResult>> {
        return this.prcKeywordsServiceWithHttpInfo(id, request, isStrict, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param prcPrepareSettings 
     */
    public prcPrepareService(id: string, prcPrepareSettings?: models.IPrcPrepareSettings, extraHttpRequestParams?: any): Observable<models.IProcess> {
        return this.prcPrepareServiceWithHttpInfo(id, prcPrepareSettings, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param request 
     */
    public prcRecommendByIdService(id: string, request?: models.IPrcRecommendationByIdRequest, extraHttpRequestParams?: any): Observable<Array<models.IPrcRecommendationResult>> {
        return this.prcRecommendByIdServiceWithHttpInfo(id, request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param request 
     */
    public prcRecommendService(id: string, request?: models.IPrcRecommendationRequest, extraHttpRequestParams?: any): Observable<Array<models.IPrcRecommendationResult>> {
        return this.prcRecommendServiceWithHttpInfo(id, request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param id 
     * @param prcActivateSettings 
     */
    public prcActivateServiceWithHttpInfo(id: string, prcActivateSettings?: models.IPrcActivateSettings, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}/Activate`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcActivateService.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'POST',
            headers: headers,
            body: prcActivateSettings == null ? '' : JSON.stringify(prcActivateSettings), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     */
    public prcDeactivateServiceWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}/Deactivate`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcDeactivateService.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'POST',
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     * @param settings 
     */
    public prcExportDictionariesWithHttpInfo(id: string, settings?: models.IExportDictionariesSettings, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}/ExportDictionaries`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcExportDictionaries.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'POST',
            headers: headers,
            body: settings == null ? '' : JSON.stringify(settings), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     */
    public prcGetServiceWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcGetService.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'GET',
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     */
    public prcIndexPartialServiceWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}/IndexPartial`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcIndexPartialService.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'POST',
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     * @param prcIndexSettings 
     */
    public prcIndexServiceWithHttpInfo(id: string, prcIndexSettings?: models.IPrcIndexSettings, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}/Index`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcIndexService.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'POST',
            headers: headers,
            body: prcIndexSettings == null ? '' : JSON.stringify(prcIndexSettings), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     * @param request 
     * @param isStrict 
     */
    public prcKeywordsServiceWithHttpInfo(id: string, request?: models.IPrcKeywordsRequest, isStrict?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}/Keywords`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcKeywordsService.');
        }
        if (isStrict !== undefined) {
            queryParameters.set('isStrict', <any>isStrict);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'POST',
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     * @param prcPrepareSettings 
     */
    public prcPrepareServiceWithHttpInfo(id: string, prcPrepareSettings?: models.IPrcPrepareSettings, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}/Prepare`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcPrepareService.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'POST',
            headers: headers,
            body: prcPrepareSettings == null ? '' : JSON.stringify(prcPrepareSettings), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     * @param request 
     */
    public prcRecommendByIdServiceWithHttpInfo(id: string, request?: models.IPrcRecommendationByIdRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}/RecommendById`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcRecommendByIdService.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'POST',
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     * @param request 
     */
    public prcRecommendServiceWithHttpInfo(id: string, request?: models.IPrcRecommendationRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/Services/Prc/{id}/Recommend`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling prcRecommendService.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: 'POST',
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

}
